<?php

namespace Oni\ProductManagerBundle\Entity\Repository;

use Oni\CoreBundle\CoreGlobals;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
use Symfony\Component\DependencyInjection\ContainerAwareInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
/**
 * ProductCategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductCategoryRepository extends NestedTreeRepository
{


    /** @var ContainerInterface $container **/
    public $container;

    /** @var  TranslatorInterface */
    protected $translator;

    private $table = CoreGlobals::PRODUCT_CATEGORIES_ENTITY;


    public function getAllProductCategories($offset = 2, $maxResults = 20){

        $return = array(
            'results' => array(),
            'titles' => array()
        );

        $keys = array(
            'id' => 'pc.id',
            //translation ids as keys
            'name' => 'pc.productCategoryName',
            'product_bundle.category.url' => 'pc.productCategoryUrl'
        );


        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select($keys)
            ->from($this->table, 'pc')
            //->setFirstResult($offset)
            //->setMaxResults($maxResults)
            ->where('pc.lvl != 0');

        $query = $qb->getQuery();

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

        $query->setHint(\Gedmo\Translatable\TranslatableListener::HINT_FALLBACK, 1);

        //$results = new Paginator($query, $fetchJoinCollection = true);

        $results = $query->getResult();

        $return['results'] = $results;
        $return['titles'] = $keys;


        return $return;

    }

    /****
     *
     * Get all With fallback false
     *
     * @param array|integer $exclude
     * @return object
     *
     */
    public function findAllWithFallBack($exclude){


        $q = $this->getEntityManager()->createQueryBuilder();
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('t')
            ->from($this->table, 't');

        if ($exclude){

            $qb->where($q->expr()->notIn('t.id',$exclude));

        }





        $query = $qb->getQuery()->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        $query->setHint(\Gedmo\Translatable\TranslatableListener::HINT_FALLBACK, 1);
        $category = $query->getResult();


        return $category;

    }

    /****
     *
     * Get product all product categories for Form
     *
     * @return mixed
     *
     */
    public function getFormProductCategoryChoices($excludeId = false){


        $return = array();



        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('*')
            ->from($this->table, 't')
            ->where('t.lvl != 1');

        if ($excludeId){
            $qb->where('t.Id != :excludeId')
                ->setParameter('excludeId', $excludeId);
        }

        $query = $qb->getQuery();

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

        $query->setHint(\Gedmo\Translatable\TranslatableListener::HINT_FALLBACK, 1);

        $categories = $query->getResult(\Doctrine\ORM\Query::HYDRATE_SCALAR);

        foreach ($categories as $category){


            $return[] = $category;

        }

        return $categories;

    }


}
