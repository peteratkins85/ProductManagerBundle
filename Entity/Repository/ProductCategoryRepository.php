<?php

namespace Oni\ProductManagerBundle\Entity\Repository;

use Doctrine\ORM\AbstractQuery;
use Oni\CoreBundle\CoreGlobals;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
use Oni\CoreBundle\Doctrine\Spec\Specification;
use Oni\CoreBundle\Entity\Repository\CoreRepositoryInterface;
use Symfony\Component\DependencyInjection\ContainerAwareInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\Translation\Translator;
use Symfony\Component\Translation\TranslatorInterface;

/**
 * ProductCategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductCategoryRepository extends NestedTreeRepository implements CoreRepositoryInterface
{


    /** @var ContainerInterface $container **/
    protected $container;

    /** @var  TranslatorInterface */
    protected $translator;

    /**
     * @var string
     */
    private $table = CoreGlobals::PRODUCT_CATEGORIES_ENTITY;

    /**
     * @return array
     */
    public function getAllProductCategories()
    {
        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select([
                'pc.id',
                'pc.productCategoryName',
                'pc.productCategoryUrl'
            ])
            ->from($this->table, 'pc')
            ->where('pc.lvl != 0');

        $query = $qb->getQuery();

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

        $query->setHint(\Gedmo\Translatable\TranslatableListener::HINT_FALLBACK, 1);

        $results = $query->getResult(AbstractQuery::HYDRATE_ARRAY);


        return $results;
    }


    /**
     * @param int $page
     * @param int $maxResults
     * @return arra
     */
    public function getAllProductCategoriesWithLimit($page = 1, $maxResults = 20)
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select([
                'pc.id',
                'pc.productCategoryName',
                'pc.productCategoryUrl'
            ])
            ->from($this->table, 'pc')
            ->setFirstResult($offset)
            ->setMaxResults($maxResults)
            ->where('pc.lvl != 0');

        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select([
                'count(pc.id)',
            ])
            ->from($this->table, 'pc')
//            ->setFirstResult($offset)
//            ->setMaxResults($maxResults)
            ->where('pc.lvl != 0');


        $query = $qb->getQuery();

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

        $query->setHint(\Gedmo\Translatable\TranslatableListener::HINT_FALLBACK, 1);

        $results = $query->getResult(AbstractQuery::HYDRATE_ARRAY);


        return $results;

    }

    /****
     *
     * Get all With fallback false
     *
     * @param array|integer $exclude
     * @return object
     *
     */
    public function findAllWithFallBack($exclude){


        $q = $this->getEntityManager()->createQueryBuilder();
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('t')
            ->from($this->table, 't');

        if ($exclude){

            $qb->where($q->expr()->notIn('t.id',$exclude));

        }

        $query = $qb->getQuery()->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        $query->setHint(\Gedmo\Translatable\TranslatableListener::HINT_FALLBACK, 1);
        $category = $query->getResult();


        return $category;

    }

    /****
     *
     * Get product all product categories for Form
     *
     * @return mixed
     *
     */
    public function getFormProductCategoryChoices($excludeId = false)
    {
        $return = [];

        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('*')
            ->from($this->table, 't')
            ->where('t.lvl != 1');

        if ($excludeId){
            $qb->where('t.Id != :excludeId')
                ->setParameter('excludeId', $excludeId);
        }

        $query = $qb->getQuery();

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

        $query->setHint(\Gedmo\Translatable\TranslatableListener::HINT_FALLBACK, 1);

        $categories = $query->getResult(\Doctrine\ORM\Query::HYDRATE_SCALAR);

        foreach ($categories as $category){


            $return[] = $category;

        }

        return $categories;

    }


    /**
     * Sets the container.
     *
     * @param ContainerInterface|null $container A ContainerInterface instance or null
     */
    public function setContainer( ContainerInterface $container = null )
    {
        $this->container = $container;
    }

    /**
     * Set Translator
     *
     * @param \Symfony\Component\Translation\Translator $translator
     *
     * @return mixed
     */
    public function setTranslator( TranslatorInterface $translator )
    {
        $this->translator = $translator;
    }

    /**
     * @param Specification $specification
     * @return array
     */
    public function match(Specification $specification)
    {
        if ( ! $specification->supports($this->getEntityName())) {
            throw new \InvalidArgumentException("Specification not supported by this repository.");
        }

        $qb = $this->createQueryBuilder('pc');
        $expr = $specification->match($qb, 'pc');
        $query = $qb->where($expr)->getQuery();
        $specification->modifyQuery($query);

        return $query->getResult();
    }

}
