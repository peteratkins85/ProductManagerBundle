<?php

namespace Cms\ProductManagerBundle\Entity\Repository;

use Cms\CoreBundle\CoreGlobals;
use Cms\CoreBundle\Entity\Languages;
use Doctrine\ORM\EntityRepository;
use Gedmo\Tree\NestedTreeRootRepositoryTest;
use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
use Gedmo\Translatable\Entity\Repository\TranslationRepository;
use Doctrine\ORM\EntityManager;
/**
 * ProductCategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductCategoryRepository extends NestedTreeRepository
{


    /**
     * Set via Repository Factory
     */
    public $languageId;

    public function getAllProductCategories(){

        $return = array(
            'results' => array(),
            'titles' => array()
        );

        $keys = array(
            'Category Id' => 'pc.id',
            'Category Name' => 'pc.productCategoryName'
        );


        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select($keys)
            ->from(CoreGlobals::PRODUCT_CATEGORIES_ENTITY, 'pc')
            ->where('pc.lvl != 0');

        $results = $qb->getQuery()->getResult(\Doctrine\ORM\Query::HYDRATE_OBJECT);
        $return['results'] = $results;
        $return['titles'] = $keys;


        return $return;

    }

    /****
     *
     * Get product all product categories for Form
     *
     * @return mixed
     *
     */
    public function getFormProductCategoryChoices(){


        $return = array();

        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('*')
            ->from(CoreGlobals::PRODUCT_CATEGORIES_ENTITY, 'pc')
            ->where('pc.lvl != 1');

        $categories = $qb->getQuery()->getResult(\Doctrine\ORM\Query::HYDRATE_SCALAR);

        foreach ($categories as $category){


            $return[] = $category;

        }

        return $categories;

    }



}
