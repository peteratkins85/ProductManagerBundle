<?php

namespace Oni\ProductManagerBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Gedmo\Tree\RepositoryInterface;
use Oni\CoreBundle\CoreGlobals;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\Translation\TranslatorInterface;

/**
 * ProductsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{
    /** @var  ContainerInterface */
    public $container;

    /** @var  TranslatorInterface */
    public $translator;

    private $table = CoreGlobals::PRODUCT_ENTITY;

    public function getAllProduct($currentPage = 1, $limit = 10){

        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select([
                'p.id',
                'p.productName',
                'p.productCode'
            ])
            ->from($this->table, 'p');
//            ->setFirstResult($limit * ($currentPage - 1))
//            ->setMaxResults($limit);

        $query = $qb->getQuery();

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

        $query->setHint(\Gedmo\Translatable\TranslatableListener::HINT_FALLBACK, 1);

        //$results = new Paginator($query);

        $results = $query->getResult();


        return $results;

    }

}
