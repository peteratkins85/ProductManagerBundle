<?php

namespace Oni\ProductManagerBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Gedmo\Tree\RepositoryInterface;
use Oni\CoreBundle\CoreGlobals;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\Translation\TranslatorInterface;

/**
 * ProductsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{
    /** @var  ContainerInterface */
    public $container;

    /** @var  TranslatorInterface */
    public $translator;

    private $table = CoreGlobals::PRODUCT_ENTITY;

    public function getAllProduct($offset = 2, $maxResults = 20){

        $return = array(
            'results' => array(),
            'titles' => array()
        );

        //Keys for below array are used for table headings
        $keys = array(
            'id' => 'p.id',
            //trans id as keys
            'name' => 'p.productName',
            'product_bundle.product.code' => 'p.productCode'
        );


        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select($keys)
            ->from($this->table, 'p');
            //->setFirstResult($offset)
            //->setMaxResults($maxResults)
            //->where('p.lvl != 0');

        $query = $qb->getQuery();

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

        $query->setHint(\Gedmo\Translatable\TranslatableListener::HINT_FALLBACK, 1);

        //$results = new Paginator($query, $fetchJoinCollection = true);

        $results = $query->getResult();

        $return['results'] = $results;
        $return['titles'] = $keys;


        return $return;

    }

}
